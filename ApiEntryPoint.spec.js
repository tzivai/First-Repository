/*
 * api-sap-invoices-v1
 *  This section will cover the Entities of the API with their definitions and the relationship between them.  Common terms used in this API document are included below:  | **Term or Acronym** | **Definition** | | ------------------- |:---------------| | ApiResponseObject   | The response object returned when the request made was successful (code 200). This entity is formed by three fields: `sapTsaMetadata`, `status` and `records`. The results from the endpoint will be contained in the `records` field in the shape of a list, even when is only one record.  &nbsp; **For more information about the response format, please visit our documentation section [Envelope](https://developer.pfizer.com/documents/apisguide-envelope)**
 *
 * OpenAPI spec version: 1.13.0-SNAPSHOT
 * Contact: DL-Applinks-EIHOnDemand-Support@pfizer.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApiSapInvoicesV1);
  }
}(this, function(expect, ApiSapInvoicesV1) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ApiEntryPoint', function() {
      beforeEach(function() {
        instance = new ApiSapInvoicesV1.ApiEntryPoint();
      });

      it('should create an instance of ApiEntryPoint', function() {
        // TODO: update the code to test ApiEntryPoint
        expect(instance).to.be.a(ApiSapInvoicesV1.ApiEntryPoint);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property environment (base name: "environment")', function() {
        // TODO: update the code to test the property environment
        expect(instance).to.have.property('environment');
        // expect(instance.environment).to.be(expectedValueLiteral);
      });

      it('should have the property branch (base name: "branch")', function() {
        // TODO: update the code to test the property branch
        expect(instance).to.have.property('branch');
        // expect(instance.branch).to.be(expectedValueLiteral);
      });

      it('should have the property version (base name: "version")', function() {
        // TODO: update the code to test the property version
        expect(instance).to.have.property('version');
        // expect(instance.version).to.be(expectedValueLiteral);
      });

      it('should have the property gitCommitId (base name: "gitCommitId")', function() {
        // TODO: update the code to test the property gitCommitId
        expect(instance).to.have.property('gitCommitId');
        // expect(instance.gitCommitId).to.be(expectedValueLiteral);
      });

      it('should have the property buildDate (base name: "buildDate")', function() {
        // TODO: update the code to test the property buildDate
        expect(instance).to.have.property('buildDate');
        // expect(instance.buildDate).to.be(expectedValueLiteral);
      });

      it('should have the property commitDate (base name: "commitDate")', function() {
        // TODO: update the code to test the property commitDate
        expect(instance).to.have.property('commitDate');
        // expect(instance.commitDate).to.be(expectedValueLiteral);
      });

      it('should have the property collections (base name: "collections")', function() {
        // TODO: update the code to test the property collections
        expect(instance).to.have.property('collections');
        // expect(instance.collections).to.be(expectedValueLiteral);
      });

      it('should have the property singletons (base name: "singletons")', function() {
        // TODO: update the code to test the property singletons
        expect(instance).to.have.property('singletons');
        // expect(instance.singletons).to.be(expectedValueLiteral);
      });

    });
  });

}));
